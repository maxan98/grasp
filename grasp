#!/usr/bin/env python3 
import sys
import os
import re
from bs4 import BeautifulSoup, Tag, NavigableString
import requests
import argparse
from pprint import pprint
from colorama import Fore
from colorama import Style

# TODO определение текущей четности недели + офлайн подсчет четности недели
# Вне сетки расписания дублируется при наличии
# Продолжаем раскрашивать (осталось аудитори и ЕБАННЫЕ ТРЕУГОЛЬНИКИ СУКА РАСКРАСИТЬ)

def prpr(d):
    for i in d:
      if i.count(';') != 0:
        if isinstance(i, NavigableString):
          continue
        i.remove(';')
      print(i,sep='\n')
def site():
    r = requests.get("http://rasp.guap.ru/").content.decode('utf-8')
    soup = BeautifulSoup(r, "html.parser")
    select = soup.find('option',text=group)
    group_prefix = select.attrs['value']

    r = requests.get("http://rasp.guap.ru/?g="+group_prefix).content.decode('utf-8')
    return r
def parseonline(r):

    # r = requests.get("http://rasp.guap.ru/").content.decode('utf-8')
    # soup = BeautifulSoup(r, "html.parser")
    # select = soup.find('option',text=group)
    # group_prefix = select.attrs['value']

    # r = requests.get("http://rasp.guap.ru/?g="+group_prefix).content.decode('utf-8')
    Soup = BeautifulSoup(r, 'html.parser')
    days = list(Soup.select('h3'))

    day = []
    #print(day)
    for dy in days:
        day.append(dy.text)

    daysii = list(Soup.select('h4'))

    dayii = []
    #print(dayii)
    for dy in daysii:
        dayii.append(dy.text)

    lenofday = len(day)
    for i in day:
      if i == 'Вне сетки расписания':
        lenofday -= 1
    print("Учимся всего", lenofday, "дня(ей)!")


    pairs = Soup.select('.study')
    #pprint(pairs)
    #print('df')
    j = 0
    cheat = []
    for i in pairs:
        str = i
        #print(day[j])
       # print(str)

        j+=1
        #print(i.find('span').text)
        t = i.find('span').previous
        tt = t.previous
        ttt = tt.previous;
        cheat.append(ttt.previous)
        cheat.append(t.previous)
        cheat.append(i.find('span').text)
        #print('_________________')

    #print(len(pairs),len(day),len(dayii))

    d = {'mon':[],'tue':[],'wed':[],'thu':[],'fri':[],'sat':[],'sun':[]}
    pattern = re.compile('Понедельник')
    columns = Soup.find(text=pattern)
    columns = columns.next
    #columns = columns.next
   # print( columns.next.text)
   # print(columns)
    #mon pairs detecting
    # counter = 0
    # pat = re.compile(group)
    # while True:
    #     columns = columns.next
    #     if isinstance(columns, NavigableString):
    #         continue
    #     # if columns.name != 'span':
    #     #     print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
    #     #     continue
    #     text = columns.text
    #
    #     print(text,'ssds')
    #     if (text.find('Вторник') == -1):
    #
    #         d['mon'].append(columns.text)
    #
    #
    #     else:
    #         break
    #TODO РАССОРТИРОВАТЬ НОРМАЛЬНО
    cases = "Nothing"
    for i in cheat:
       if i == 'Понедельник':
           cases = 'mon'
       if i == 'Вторник':
           cases = 'tue'
       if i == 'Среда':
           cases = 'wed'
       if i == 'Четверг':
           cases = 'thu'
       if i == 'Пятница':
           cases = 'fri'
       if i == 'Суббота':
           cases = 'sat'
       if i == 'Вне сетки расписания':
           cases = 'sun'
       if i == 'Nothin':
           continue
       d[cases].append(i)


# Баг с подсчетом кол-ва дней. Если есть ВНЕ СЕТКИ РАСПИСАНИЯ ПУНКТ - СЧИТАЛ НЕ ВЕРНО СУКА (FIXED)
# Раскрашиваем аутпут
    d['mon'].insert(0,Fore.BLUE+Style.BRIGHT+'Понедельник'+Style.RESET_ALL)
    if len(d['mon']) > 1:
      d['mon'].pop(1)
      for i in range(len(d['mon'])):
       if d['mon'][i].find('пара ') != -1:
         tmp = d['mon'][i]
         d['mon'][i] = ''+Fore.GREEN+Style.BRIGHT+tmp+Style.RESET_ALL
    else:
      d['mon'].append('Выходной')
    d['tue'].insert(0,Fore.BLUE+Style.BRIGHT+'Вторник'+Style.RESET_ALL)
    if len(d['tue']) > 1:
      d['tue'].pop(1)
      for i in range(len(d['tue'])):
        if d['tue'][i].find('пара ') != -1:
          tmp = d['tue'][i]
          d['tue'][i] = ''+Fore.GREEN+Style.BRIGHT+tmp+Style.RESET_ALL
    else:
      d['tue'].append('Выходной')
    d['wed'].insert(0,Fore.BLUE+Style.BRIGHT+'Среда'+Style.RESET_ALL)
    if len(d['wed']) > 1:
      d['wed'].pop(1)
      for i in range(len(d['wed'])):
        if d['wed'][i].find('пара ') != -1:
          tmp = d['wed'][i]
          d['wed'][i] = ''+Fore.GREEN+Style.BRIGHT+tmp+Style.RESET_ALL
    else:
      d['wed'].append('Выходной')
    d['thu'].insert(0,Fore.BLUE+Style.BRIGHT+'Четверг'+Style.RESET_ALL)
    if len(d['thu']) > 1:
      d['thu'].pop(1)
      for i in range(len(d['thu'])):
        if d['thu'][i].find('пара ') != -1:
          tmp = d['thu'][i]
          d['thu'][i] = ''+Fore.GREEN+Style.BRIGHT+tmp+Style.RESET_ALL
    else:
      d['thu'].append('Выходной')
    d['fri'].insert(0,Fore.BLUE+Style.BRIGHT+'Пятница'+Style.RESET_ALL)
    if len(d['fri']) > 1:
      d['fri'].pop(1)
      for i in range(len(d['fri'])):
        if d['fri'][i].find('пара ') != -1:
          tmp = d['fri'][i]
          d['fri'][i] = ''+Fore.GREEN+Style.BRIGHT+tmp+Style.RESET_ALL
    else:
      d['fri'].append('Выходной')
    d['sat'].insert(0,Fore.BLUE+Style.BRIGHT+'Суббота'+Style.RESET_ALL)
    if len(d['sat']) > 1:
      d['sat'].pop(1)
      for i in range(len(d['sat'])):
        if d['sat'][i].find('пара ') != -1:
          tmp = d['sat'][i]
          d['sat'][i] = ''+Fore.GREEN+Style.BRIGHT+tmp+Style.RESET_ALL
    else:
      d['sat'].append('Выходной')
    d['sun'].insert(0,Fore.BLUE+Style.BRIGHT+'Вне сетки расписания'+Style.RESET_ALL)
    if len(d['sun']) > 1:
      d['sun'].pop(1)
      for i in range(len(d['sun'])):
        if d['sun'][i].find('пара ') != -1:
          tmp = d['sun'][i]
          d['sun'][i] = ''+Fore.GREEN+Style.BRIGHT+tmp+Style.RESET_ALL
    else:
      d['sun'].append('Радуйся если тут пусто')
    if dz == 'whole':
           
           prpr(d['mon'])
           print('_________________')
           
           prpr(d['tue'])
           print('_________________')
           
           prpr(d['wed'])
           print('_________________')
           
           prpr(d['thu'])
           print('_________________')
           
           prpr(d['fri'])
           print('_________________')
           
           prpr(d['sat'])
           print('_________________')
           
           prpr(d['sun'])
    elif dz == 'mon':
           prpr(d['mon'])
    elif dz == 'tue':
           prpr(d['tue'])
    elif dz == 'wed':
           prpr(d['wed'])
    elif dz == 'thu':
           prpr(d['thu'])
    elif dz == 'fri':
           prpr(d['fri'])
    elif dz == 'sat':
           prpr(d['sat'])
    elif dz == 'sun':
           prpr(d['sun'])

def parseofline():
  file = open('/Users/sklyarov/Desktop/scripts/cached/'+group,'r')
  r = file.read()
  file.close()
  parseonline(r);

def createParser():
  parser = argparse.ArgumentParser(description = 'SUAI Online/Offline timetable')
  return parser
def cachett():
  r = requests.get("http://rasp.guap.ru/").content.decode('utf-8')
  soup = BeautifulSoup(r, "html.parser")
  select = soup.find('option',text=group)
  group_prefix = select.attrs['value']
  r = requests.get("http://rasp.guap.ru/?g="+group_prefix).content.decode('utf-8')
  if not os.path.exists('/Users/sklyarov/Desktop/scripts/cached'):
    os.makedirs('/Users/sklyarov/Desktop/scripts/cached')
  file = open('/Users/sklyarov/Desktop/scripts/cached/'+group,'w')
  file.write(r)
  file.close()
  print('Cached successful! \n File name - ',file.name)

if __name__ == '__main__':
    parser = createParser()
    parser.add_argument('-o','--online',help='Online mod',action='store_true')
    parser.add_argument('-f','--offline',help='Offline mod',action='store_true')
    parser.add_argument('-c','--cache',help='Cache timetable',action='store_true')
    parser.add_argument('-g', '--group', default='5512', help= 'Your group number. DEFAULT = 5512')
    parser.add_argument('-d', '--dz', default='whole', help = 'Day of week. EX. mon;tue;wed;thu;fri;sat;sun')
    ns = parser.parse_args()
    group = ns.group
    dz = ns.dz
    if ns.cache:
      cachett()
    elif ns.online:
      parseonline(site())
    elif ns.offline:
      parseofline()
    else:
      print(Fore.RED+"Wrong usage. Use '-h' for help."+Style.RESET_ALL)
    